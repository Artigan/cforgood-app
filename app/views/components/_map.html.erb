<script>

  var geoJson = <%= raw(@geojson.to_json) %>;
  var markers = geoJson;
  var filterGroup = document.getElementById('filter-group');

  // mapboxgl.accessToken = 'pk.eyJ1IjoiZnJlZHBldHJpcyIsImEiOiJjaWtoem9qd2IwMDJmdnBtNmZ0Y29zcG5sIn0.atyCUDfyMaoUauNY1diwtQ';
  mapboxgl.accessToken = 'pk.eyJ1IjoiZnJlZHBldHJpcyIsImEiOiJjaWtvMTIzNmIwMDlsd2hsczgzNmhoZjZ3In0.57Q6lRMPraIiM86QfsXKxg';

  if ("<%= current_user.latitude.present? %>" && "<%= current_user.longitude.present? %>") {
    var map = new mapboxgl.Map({
      container: 'map-dashboard',
      style: 'mapbox://styles/fredpetris/cikporvjj00p8b5lwovwd3kq9',
      // style: 'mapbox://styles/mapbox/streets-v8',
      center: ["<%= current_user.longitude %>", "<%= current_user.latitude %>"],
      zoom: 12
    });
  }

  if ("<%= !current_user.latitude.present? %>" || "<%= !current_user.longitude.present? %>") {
    var map = new mapboxgl.Map({
      container: 'map-dashboard',
      style: 'mapbox://styles/fredpetris/cikporvjj00p8b5lwovwd3kq9',
      // style: 'mapbox://styles/mapbox/streets-v8',
      center: [-0.57918, 44.837789],
      zoom: 12
    });
  };

  map.on('style.load', function () {
    // Add marker data as a new GeoJSON source.
    map.addSource("markers", {
      "type": "geojson",
      "data": geoJson
    });

    markers.features.forEach(function(feature) {
      var symbol = feature.properties['marker-symbol'];
      var layerID = 'poi-' + symbol;

      // Add a layer for this symbol type if it hasn't been added already.
      if (!map.getLayer(layerID)) {
        map.addLayer({
          "id": layerID,
          "type": "symbol",
          "source": "markers",
          "interactive": true,
          "layout": {
            "icon-image": symbol,
            "icon-allow-overlap": true
          },
          "filter": ["==", "marker-symbol", symbol]
        });
      }
    });
  });

  // When a click event occurs near a marker icon, open a popup at the location of
  // the feature, with description HTML from its properties.
  map.on('click', function (e) {

    map.featuresAt(e.point, {radius: 10, includeGeometry: true}, function (err, features) {

      if (err || !features.length)
        return;

        var feature = features[0];
        var coordinates = features[0].geometry.coordinates;
        // Get coordinates from the symbol and center the map on those coordinates
        map.flyTo({center: [coordinates[0],coordinates[1]-0.012]});
        new mapboxgl
          .Popup({
            closeButton: false,
            closeOnClick: true,
            anchor: "bottom"})
          .setLngLat(feature.geometry.coordinates)
          .setHTML(feature.properties.description)
          .addTo(map);
    });
  });

  // Use the same approach as above to indicate that the symbols are clickable
  // by changing the cursor style to 'pointer'.
  // map.on('mousemove', function (e) {
  //     map.featuresAt(e.point, {layer: 'markers', radius: 10}, function (err, features) {
  //         map.getCanvas().style.cursor = (!err && features.length) ? 'pointer' : '';
  //     });
  // });

</script>
